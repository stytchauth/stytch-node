/**
 * Stytch
 * This is the Stytch api.  You can find out more about Stytch at  [stytch.com](https://stytch.com). 
 *
 * OpenAPI spec version: v1
 * Contact: hello@stytch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { ErrorResponse } from '../model/errorResponse';
import { 
    UserCreate,
    UserCreateResponse,
    UserDeleteEmailResponse,
    UserDeleteResponse,
    UserGetInvitedResponse,
    UserGetResponse,
    UserUpdate,
    UserUpdateResponse,
} from '../model/users';

import { Configuration }                                     from '../configuration';


@Injectable()
export class Users {

    protected basePath = 'https://test.stytch.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.environment == 'TEST' ? 'https://test.stytch.com/v1' : 'https://api.stytch.com/v1';
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create user
     * Add a user to Stytch. A user_id is returned in the response that can then be used to perform other operations within Stytch.
     * @param body Created user object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUser(body: UserCreate, observe?: 'body', reportProgress?: boolean): Observable<UserCreateResponse>;
    public createUser(body: UserCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserCreateResponse>>;
    public createUser(body: UserCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserCreateResponse>>;
    public createUser(body: UserCreate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.projectId || this.configuration.secret) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.projectId + ':' + this.configuration.secret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UserCreateResponse>('post',`${this.basePath}/users`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete user
     * Remove a user from Stytch.
     * @param userId The user_id to be deleted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUser(userId: string, observe?: 'body', reportProgress?: boolean): Observable<UserDeleteResponse>;
    public deleteUser(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDeleteResponse>>;
    public deleteUser(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDeleteResponse>>;
    public deleteUser(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.projectId || this.configuration.secret) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.projectId + ':' + this.configuration.secret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserDeleteResponse>('delete',`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete user email
     * Remove an email from a given user.
     * @param userId The user_id to delete an email from.
     * @param email The email to be deleted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUserEmail(userId: string, email: string, observe?: 'body', reportProgress?: boolean): Observable<UserDeleteEmailResponse>;
    public deleteUserEmail(userId: string, email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDeleteEmailResponse>>;
    public deleteUserEmail(userId: string, email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDeleteEmailResponse>>;
    public deleteUserEmail(userId: string, email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserEmail.');
        }

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling deleteUserEmail.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.projectId || this.configuration.secret) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.projectId + ':' + this.configuration.secret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserDeleteEmailResponse>('delete',`${this.basePath}/users/${encodeURIComponent(String(userId))}/emails/${encodeURIComponent(String(email))}`,
            {
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get invited users
     * Fetch all outstanding invited users to see what their various attributes are.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInvitedUsers(observe?: 'body', reportProgress?: boolean): Observable<UserGetInvitedResponse>;
    public getInvitedUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserGetInvitedResponse>>;
    public getInvitedUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserGetInvitedResponse>>;
    public getInvitedUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.projectId || this.configuration.secret) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.projectId + ':' + this.configuration.secret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserGetInvitedResponse>('get',`${this.basePath}/users/invites`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user
     * Fetch a given user to see what their various attributes are.
     * @param userId The user_id for the user to fetch.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserByID(userId: string, observe?: 'body', reportProgress?: boolean): Observable<UserGetResponse>;
    public getUserByID(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserGetResponse>>;
    public getUserByID(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserGetResponse>>;
    public getUserByID(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserByID.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.projectId || this.configuration.secret) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.projectId + ':' + this.configuration.secret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserGetResponse>('get',`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update user
     * Update a user&#x27;s attributes. For example, you can add additional emails or change the user&#x27;s primary email.
     * @param body Updated user object
     * @param userId The user_id to update.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUser(body: UserUpdate, userId: string, observe?: 'body', reportProgress?: boolean): Observable<UserUpdateResponse>;
    public updateUser(body: UserUpdate, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserUpdateResponse>>;
    public updateUser(body: UserUpdate, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserUpdateResponse>>;
    public updateUser(body: UserUpdate, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.projectId || this.configuration.secret) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.projectId + ':' + this.configuration.secret));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UserUpdateResponse>('put',`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                body: body,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
