/**
 * Stytch
 * This is the Stytch api.  You can find out more about Stytch at  [stytch.com](https://stytch.com). 
 *
 * OpenAPI spec version: v1
 * Contact: hello@stytch.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {
  projectId: 'your-project-id',
  secret: 'your-secret',
  environment: 'TEST'
}

describe("MagicLinksApi", () => {
  let instance: api.MagicLinksApi
  beforeEach(function() {
    instance = new api.MagicLinksApi(config)
  });

  test("inviteByEmail", () => {
    const body: api.MagicLinkInviteByEmail = undefined
    return expect(instance.inviteByEmail(body, {})).resolves.toBe(null)
  })
  test("loginOrCreateWithMagicLink", () => {
    const body: api.MagicLinkLoginOrCreate = undefined
    return expect(instance.loginOrCreateWithMagicLink(body, {})).resolves.toBe(null)
  })
  test("loginOrInviteByMagicLink", () => {
    const body: api.MagicLinkLoginOrInvite = undefined
    return expect(instance.loginOrInviteByMagicLink(body, {})).resolves.toBe(null)
  })
  test("authenticateMagicLink", () => {
    const body: api.MagicLinkAuthenticate = undefined
    const token: string = "token_example"
    return expect(instance.authenticateMagicLink(body, token, {})).resolves.toBe(null)
  })
  test("revokeInviteByEmail", () => {
    const body: api.MagicLinkRevokeInviteByEmail = undefined
    return expect(instance.revokeInviteByEmail(body, {})).resolves.toBe(null)
  })
  test("sendEmailMagicLink", () => {
    const body: api.MagicLinkSendByEmail = undefined
    return expect(instance.sendEmailMagicLink(body, {})).resolves.toBe(null)
  })
  test("sendMagicLink", () => {
    const body: api.MagicLinkSend = undefined
    return expect(instance.sendMagicLink(body, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("createUser", () => {
    const body: api.UserCreate = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const userId: string = "userId_example"
    return expect(instance.deleteUser(userId, {})).resolves.toBe(null)
  })
  test("deleteUserEmail", () => {
    const userId: string = "userId_example"
    const email: string = "email_example"
    return expect(instance.deleteUserEmail(userId, email, {})).resolves.toBe(null)
  })
  test("getInvitedUsers", () => {
    return expect(instance.getInvitedUsers({})).resolves.toBe(null)
  })
  test("getUserByID", () => {
    const userId: string = "userId_example"
    return expect(instance.getUserByID(userId, {})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.UserUpdate = undefined
    const userId: string = "userId_example"
    return expect(instance.updateUser(body, userId, {})).resolves.toBe(null)
  })
})

