"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntermediateSessions = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `discovery.intermediateSessions.exchange`.

// Response type for `discovery.intermediateSessions.exchange`.

class IntermediateSessions {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Exchange an Intermediate Session for a fully realized
   * [Member Session](https://stytch.com/docs/b2b/api/session-object) for the
   * [Organization](https://stytch.com/docs/b2b/api/organization-object) that the user wishes to log into.
   *
   * This endpoint can be used to accept invites and JIT Provision into a new Organization on the basis of
   * the user's email domain or OAuth tenant.
   *
   * If the user **has** already satisfied the authentication requirements of the Organization they are
   * trying to exchange into and logged in with a method that verifies their email address, this API will
   * return `member_authenticated: true` and a `session_token` and `session_jwt`.
   *
   * If the user **has not** satisfied the primary or secondary authentication requirements of the
   * Organization they are attempting to exchange into or is JIT Provisioning but did not log in via a method
   * that provides email verification, this API will return `member_authenticated: false` and an
   * `intermediate_session_token`.
   *
   * If `primary_required` is returned, prompt the user to fulfill the Organization's auth requirements using
   * the options returned in `primary_required.allowed_auth_methods`.
   *
   * If `primary_required` is null and `mfa_required` is set, check `mfa_required.member_options` to
   * determine if the Member has SMS OTP or TOTP set up for MFA and prompt accordingly. If the Member has SMS
   * OTP, check `mfa_required.secondary_auth_initiated` to see if the OTP has already been sent.
   *
   * Include the `intermediate_session_token` returned above when calling the `authenticate()` method that
   * the user needed to perform. Once the user has completed the authentication requirements they were
   * missing, they will be granted a full `session_token` and `session_jwt` to indicate they have
   * successfully logged into the Organization.
   *
   * The `intermediate_session_token` can also be used with the
   * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to create a new Organization instead of joining an existing one.
   * @param data {@link B2BDiscoveryIntermediateSessionsExchangeRequest}
   * @returns {@link B2BDiscoveryIntermediateSessionsExchangeResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  exchange(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/discovery/intermediate_sessions/exchange`,
      headers,
      data
    });
  }
}
exports.IntermediateSessions = IntermediateSessions;