"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OAuth = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `idp.oauth.authorize`.

// Response type for `idp.oauth.authorize`.

// Request type for `idp.oauth.authorizeStart`.

// Response type for `idp.oauth.authorizeStart`.

class OAuth {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Initiates a request for authorization of a Connected App to access a Member's account.
   *
   * Call this endpoint using the query parameters from an OAuth Authorization request.
   * This endpoint validates various fields (`scope`, `client_id`, `redirect_uri`, `prompt`, etc...) are
   * correct and returns
   * relevant information for rendering an OAuth Consent Screen.
   *
   * This endpoint returns:
   * - A public representation of the Connected App requesting authorization
   * - Whether _explicit_ consent must be granted before proceeding with the authorization
   * - A list of scopes the Member has the ability to grant the Connected App
   *
   * Use this response to prompt the Member for consent (if necessary) before calling the
   * [Submit OAuth Authorization](https://stytch.com/docs/b2b/api/connected-apps-oauth-authorize) endpoint.
   *
   * Exactly one of the following must be provided to identify the Member granting authorization:
   * - `organization_id` + `member_id`
   * - `session_token`
   * - `session_jwt`
   *
   * If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the Member's
   * session for tracking purposes.
   * One of these fields must be used if the Connected App intends to complete the
   * [Exchange Access Token](https://stytch.com/docs/b2b/api/connected-app-access-token-exchange) flow.
   * @param data {@link B2BIDPOAuthAuthorizeStartRequest}
   * @returns {@link B2BIDPOAuthAuthorizeStartResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authorizeStart(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/idp/oauth/authorize/start`,
      headers,
      data
    });
  }

  /**
   * Completes a request for authorization of a Connected App to access a Member's account.
   *
   * Call this endpoint using the query parameters from an OAuth Authorization request, after previously
   * validating those parameters using the
   * [Preflight Check](https://stytch.com/docs/b2b/api/connected-apps-oauth-authorize-start) API.
   * Note that this endpoint takes in a few additional parameters the preflight check does not- `state`,
   * `nonce`, and `code_challenge`.
   *
   * If the authorization was successful, the `redirect_uri` will contain a valid `authorization_code`
   * embedded as a query parameter.
   * If the authorization was unsuccessful, the `redirect_uri` will contain an OAuth2.1 `error_code`.
   * In both cases, redirect the Member to the location for the response to be consumed by the Connected App.
   *
   * Exactly one of the following must be provided to identify the Member granting authorization:
   * - `organization_id` + `member_id`
   * - `session_token`
   * - `session_jwt`
   *
   * If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the Member's
   * session for tracking purposes.
   * One of these fields must be used if the Connected App intends to complete the
   * [Exchange Access Token](https://stytch.com/docs/b2b/api/connected-app-access-token-exchange) flow.
   * @param data {@link B2BIDPOAuthAuthorizeRequest}
   * @returns {@link B2BIDPOAuthAuthorizeResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authorize(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/idp/oauth/authorize`,
      headers,
      data
    });
  }
}
exports.OAuth = OAuth;