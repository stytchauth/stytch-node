"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Impersonation = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `impersonation.authenticate`.

// Response type for `impersonation.authenticate`.

class Impersonation {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Authenticate an impersonation token to impersonate a. This endpoint requires an impersonation token that
   * is not expired or previously used.
   * A Stytch session will be created for the impersonated member with a 60 minute duration. Impersonated
   * sessions cannot be extended.
   *
   * Prior to this step, you can generate an impersonation token by visiting the Stytch dashboard, viewing a
   * member, and clicking the `Impersonate Member` button.
   * @param data {@link B2BImpersonationAuthenticateRequest}
   * @returns {@link B2BImpersonationAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/impersonation/authenticate`,
      headers,
      data
    });
  }
}
exports.Impersonation = Impersonation;