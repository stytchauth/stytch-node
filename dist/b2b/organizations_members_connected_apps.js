"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectedApps = void 0;
var _method_options = require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `organizations.members.connectedApps.revoke`.

// Response type for `organizations.members.connectedApps.revoke`.

class ConnectedApps {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Revoke Connected App revokes a Connected App's access to a Member and revokes all active tokens that
   * have been created
   * on the Member's behalf. New tokens cannot be created until the Member completes a new authorization flow
   * with the
   * Connected App.
   * @param data {@link B2BOrganizationsMembersConnectedAppsRevokeRequest}
   * @param options {@link B2BOrganizationsMembersConnectedAppsRevokeRequestOptions}
   * @returns {@link B2BOrganizationsMembersConnectedAppsRevokeResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  revoke(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/organizations/${data.organization_id}/members/${data.member_id}/connected_apps/${data.connected_app_id}/revoke`,
      headers,
      data: {}
    });
  }
}
exports.ConnectedApps = ConnectedApps;