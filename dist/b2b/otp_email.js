"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Email = void 0;
require("../shared/method_options");
var _otp_email_discovery = require("./otp_email_discovery");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `otps.email.authenticate`.

// Response type for `otps.email.authenticate`.

// Request type for `otps.email.loginOrSignup`.

// Response type for `otps.email.loginOrSignup`.

class Email {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
    this.discovery = new _otp_email_discovery.Discovery(this.fetchConfig);
  }

  /**
   * Send either a login or signup email OTP to a Member. A new, pending, or invited Member will receive a
   * signup email OTP. Non-active members will have a pending status until they successfully authenticate. An
   * active Member will receive a login email OTP.
   *
   * The OTP is valid for 10 minutes. Only the most recently sent OTP is valid: when an OTP is sent, all OTPs
   * previously sent to the same email address are invalidated, even if unused or unexpired.
   * @param data {@link B2BOTPEmailLoginOrSignupRequest}
   * @returns {@link B2BOTPEmailLoginOrSignupResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  loginOrSignup(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/otps/email/login_or_signup`,
      headers,
      data
    });
  }

  /**
   * Authenticate a with a one-time passcode (OTP). This endpoint requires an OTP that is not expired or
   * previously used.
   * OTPs have a default expiry of 10 minutes. If the Memberâ€™s status is `pending` or `invited`, they will be
   * updated to `active`.
   * Provide the `session_duration_minutes` parameter to set the lifetime of the session. If the
   * `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60 minute
   * duration.
   *
   * If the Member is required to complete MFA to log in to the, the returned value of `member_authenticated`
   * will be `false`, and an `intermediate_session_token` will be returned.
   * The `intermediate_session_token` can be passed into the
   * [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms),
   * [TOTP Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-totp),
   * or [Recovery Codes Recover endpoint](https://stytch.com/docs/b2b/api/recovery-codes-recover) to complete
   * the MFA step and acquire a full member session.
   * The `intermediate_session_token` can also be used with the
   * [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)
   * or the
   * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.
   * The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
   *
   * If a valid `session_token` or `session_jwt` is passed in, the Member will not be required to complete an
   * MFA step.
   * @param data {@link B2BOTPEmailAuthenticateRequest}
   * @returns {@link B2BOTPEmailAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/otps/email/authenticate`,
      headers,
      data
    });
  }
}
exports.Email = Email;