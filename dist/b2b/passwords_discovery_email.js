"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Email = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `passwords.discovery.email.reset`.

// Response type for `passwords.discovery.email.reset`.

// Request type for `passwords.discovery.email.resetStart`.

// Response type for `passwords.discovery.email.resetStart`.

class Email {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Initiates a password reset for the email address provided, when cross-org passwords are enabled. This
   * will trigger an email to be sent to the address, containing a magic link that will allow them to set a
   * new password and authenticate.
   *
   * This endpoint adapts to your Project's password strength configuration.
   * If you're using [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the default, your
   * passwords are considered valid
   * if the strength score is >= 3. If you're using
   * [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), your passwords are
   * considered valid if they meet the requirements that you've set with Stytch.
   * You may update your password strength configuration in the
   * [stytch dashboard](https://stytch.com/dashboard/password-strength-config).
   * @param data {@link B2BPasswordsDiscoveryEmailResetStartRequest}
   * @returns {@link B2BPasswordsDiscoveryEmailResetStartResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  resetStart(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/passwords/discovery/email/reset/start`,
      headers,
      data
    });
  }

  /**
   * Reset the password associated with an email and start an intermediate session. This endpoint checks that
   * the password reset token is valid, hasnâ€™t expired, or already been used.
   *
   * The provided password needs to meet the project's password strength requirements, which can be checked
   * in advance with the password strength endpoint. If the token and password are accepted, the password is
   * securely stored for future authentication and the user is authenticated.
   *
   * Resetting a password will start an intermediate session and return a list of discovered organizations
   * the session can be exchanged into.
   * @param data {@link B2BPasswordsDiscoveryEmailResetRequest}
   * @returns {@link B2BPasswordsDiscoveryEmailResetResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  reset(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/passwords/discovery/email/reset`,
      headers,
      data
    });
  }
}
exports.Email = Email;