"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connection = void 0;
var _method_options = require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

class Connection {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * @param data {@link B2BSCIMConnectionUpdateRequest}
   * @param options {@link B2BSCIMConnectionUpdateRequestOptions}
   * @returns {@link B2BSCIMConnectionUpdateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  update(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "PUT",
      url: `/v1/b2b/scim/${data.organization_id}/connection/${data.connection_id}`,
      headers,
      data: {
        display_name: data.display_name,
        identity_provider: data.identity_provider,
        scim_group_implicit_role_assignments: data.scim_group_implicit_role_assignments
      }
    });
  }

  /**
   * @param data {@link B2BSCIMConnectionDeleteRequest}
   * @param options {@link B2BSCIMConnectionDeleteRequestOptions}
   * @returns {@link B2BSCIMConnectionDeleteResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  delete(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "DELETE",
      url: `/v1/b2b/scim/${data.organization_id}/connection/${data.connection_id}`,
      headers,
      data: {}
    });
  }

  /**
   * @param data {@link B2BSCIMConnectionRotateStartRequest}
   * @param options {@link B2BSCIMConnectionRotateStartRequestOptions}
   * @returns {@link B2BSCIMConnectionRotateStartResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  rotateStart(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/scim/${data.organization_id}/connection/${data.connection_id}/rotate/start`,
      headers,
      data: {}
    });
  }

  /**
   * @param data {@link B2BSCIMConnectionRotateCompleteRequest}
   * @param options {@link B2BSCIMConnectionRotateCompleteRequestOptions}
   * @returns {@link B2BSCIMConnectionRotateCompleteResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  rotateComplete(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/scim/${data.organization_id}/connection/${data.connection_id}/rotate/complete`,
      headers,
      data: {}
    });
  }

  /**
   * @param data {@link B2BSCIMConnectionRotateCancelRequest}
   * @param options {@link B2BSCIMConnectionRotateCancelRequestOptions}
   * @returns {@link B2BSCIMConnectionRotateCancelResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  rotateCancel(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/scim/${data.organization_id}/connection/${data.connection_id}/rotate/cancel`,
      headers,
      data: {}
    });
  }

  /**
   * @param params {@link B2BSCIMConnectionGetGroupsRequest}
   * @param options {@link B2BSCIMConnectionGetGroupsRequestOptions}
   * @returns {@link B2BSCIMConnectionGetGroupsResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  getGroups(params, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "GET",
      url: `/v1/b2b/scim/${params.organization_id}/connection/${params.connection_id}`,
      headers,
      params: {
        cursor: params.cursor,
        limit: params.limit
      }
    });
  }

  /**
   * @param data {@link B2BSCIMConnectionCreateRequest}
   * @param options {@link B2BSCIMConnectionCreateRequestOptions}
   * @returns {@link B2BSCIMConnectionCreateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  create(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/scim/${data.organization_id}/connection`,
      headers,
      data: {
        display_name: data.display_name,
        identity_provider: data.identity_provider
      }
    });
  }

  /**
   * @param params {@link B2BSCIMConnectionGetRequest}
   * @param options {@link B2BSCIMConnectionGetRequestOptions}
   * @returns {@link B2BSCIMConnectionGetResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  get(params, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "GET",
      url: `/v1/b2b/scim/${params.organization_id}/connection`,
      headers,
      params: {}
    });
  }
}
exports.Connection = Connection;