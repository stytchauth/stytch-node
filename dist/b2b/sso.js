"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SSO = void 0;
var _sso_oidc = require("./sso_oidc");
var _shared = require("../shared");
var _sso_saml = require("./sso_saml");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `sso.authenticate`.

// Response type for `sso.authenticate`.

// Request type for `sso.deleteConnection`.

// Response type for `sso.deleteConnection`.

// Request type for `sso.getConnections`.

// Response type for `sso.getConnections`.

class SSO {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
    this.oidc = new _sso_oidc.OIDC(this.fetchConfig);
    this.saml = new _sso_saml.SAML(this.fetchConfig);
  }

  /**
   * Get all SSO Connections owned by the organization.
   * @param data {@link B2BSSOGetConnectionsRequest}
   * @returns {@link B2BSSOGetConnectionsResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  getConnections(params) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "GET",
      url: `/v1/b2b/sso/${params.organization_id}`,
      params: {}
    });
  }

  /**
   * Delete an existing SSO connection.
   * @param data {@link B2BSSODeleteConnectionRequest}
   * @returns {@link B2BSSODeleteConnectionResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  deleteConnection(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "DELETE",
      url: `/v1/b2b/sso/${data.organization_id}/connections/${data.connection_id}`,
      data: {}
    });
  }

  /**
   * Authenticate a user given a token.
   * This endpoint verifies that the user completed the SSO Authentication flow by verifying that the token
   * is valid and hasn't expired.
   * Provide the `session_duration_minutes` parameter to set the lifetime of the session.
   * If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60
   * minute duration.
   * To link this authentication event to an existing Stytch session, include either the `session_token` or
   * `session_jwt` param.
   *
   * If the Member is required to complete MFA to log in to the Organization, the returned value of
   * `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
   * The `intermediate_session_token` can be passed into the
   * [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the
   * MFA step and acquire a full member session.
   * The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
   *
   * If a valid `session_token` or `session_jwt` is passed in, the Member will not be required to complete an
   * MFA step.
   * @param data {@link B2BSSOAuthenticateRequest}
   * @returns {@link B2BSSOAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/sso/authenticate`,
      data
    });
  }
}
exports.SSO = SSO;