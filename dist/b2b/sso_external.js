"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.External = void 0;
var _method_options = require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `sso.external.createConnection`.

// Response type for `sso.external.createConnection`.

// Request type for `sso.external.updateConnection`.

// Response type for `sso.external.updateConnection`.

class External {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Create a new External SSO Connection.
   * @param data {@link B2BSSOExternalCreateConnectionRequest}
   * @param options {@link B2BSSOExternalCreateConnectionRequestOptions}
   * @returns {@link B2BSSOExternalCreateConnectionResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  createConnection(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/sso/external/${data.organization_id}`,
      headers,
      data: {
        external_organization_id: data.external_organization_id,
        external_connection_id: data.external_connection_id,
        display_name: data.display_name,
        connection_implicit_role_assignments: data.connection_implicit_role_assignments,
        group_implicit_role_assignments: data.group_implicit_role_assignments
      }
    });
  }

  /**
   * Updates an existing External SSO connection.
   * @param data {@link B2BSSOExternalUpdateConnectionRequest}
   * @param options {@link B2BSSOExternalUpdateConnectionRequestOptions}
   * @returns {@link B2BSSOExternalUpdateConnectionResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  updateConnection(data, options) {
    const headers = {};
    if (options?.authorization) {
      (0, _method_options.addAuthorizationHeaders)(headers, options.authorization);
    }
    return (0, _shared.request)(this.fetchConfig, {
      method: "PUT",
      url: `/v1/b2b/sso/external/${data.organization_id}/connections/${data.connection_id}`,
      headers,
      data: {
        display_name: data.display_name,
        external_connection_implicit_role_assignments: data.external_connection_implicit_role_assignments,
        external_group_implicit_role_assignments: data.external_group_implicit_role_assignments
      }
    });
  }
}
exports.External = External;