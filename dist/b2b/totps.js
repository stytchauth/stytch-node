"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TOTPs = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `totps.authenticate`.

// Response type for `totps.authenticate`.

// Request type for `totps.create`.

// Response type for `totps.create`.

// Request type for `totps.migrate`.

// Response type for `totps.migrate`.

class TOTPs {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Create a new TOTP instance for a Member. The Member can use the authenticator application of their
   * choice to scan the QR code or enter the secret.
   *
   * Passing an intermediate session token, session token, or session JWT is not required, but if passed must
   * match the Member ID passed.
   * @param data {@link B2BTOTPsCreateRequest}
   * @returns {@link B2BTOTPsCreateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  create(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/totp`,
      headers,
      data
    });
  }

  /**
   * Authenticate a Member provided TOTP.
   * @param data {@link B2BTOTPsAuthenticateRequest}
   * @returns {@link B2BTOTPsAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/totp/authenticate`,
      headers,
      data
    });
  }

  /**
   * Migrate an existing TOTP instance for a Member. Recovery codes are not required and will be minted for
   * the Member if not provided.
   * @param data {@link B2BTOTPsMigrateRequest}
   * @returns {@link B2BTOTPsMigrateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  migrate(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/totp/migrate`,
      headers,
      data
    });
  }
}
exports.TOTPs = TOTPs;