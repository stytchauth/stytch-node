"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Fingerprint = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `fraud.fingerprint.lookup`.

// Response type for `fraud.fingerprint.lookup`.

class Fingerprint {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Lookup the associated fingerprint for the `telemetry_id` returned from the `GetTelemetryID` function.
   * Learn more about the different fingerprint types and verdicts in our
   * [DFP guide](https://stytch.com/docs/fraud/guides/device-fingerprinting/overview).
   *
   * Make a decision based on the returned `verdict`:
   * * `ALLOW` - This is a known valid device grouping or device profile that is part of the default `ALLOW`
   * listed set of known devices by Stytch. This grouping is made up of  verified device profiles that match
   * the characteristics of known/authentic traffic origins.
   * * `BLOCK` - This is a known bad or malicious device profile that is undesirable and should be blocked
   * from completing the privileged action in question.
   * * `CHALLENGE` - This is an unknown or potentially malicious device that should be put through increased
   * friction such as 2FA or other forms of extended user verification before allowing the privileged action
   * to proceed.
   *
   * If the `telemetry_id` is not found, we will return a 404 `telemetry_id_not_found`
   * [error](https://stytch.com/docs/fraud/api/errors/404#telemetry_id_not_found). We recommend treating 404
   * errors as a `BLOCK`, since it could be a sign of an attacker trying to bypass DFP protections by
   * generating fake telemetry IDs.
   * @param data {@link FraudFingerprintLookupRequest}
   * @returns {@link FraudFingerprintLookupResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  lookup(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/fingerprint/lookup`,
      baseURLType: "FRAUD",
      headers,
      data
    });
  }
}
exports.Fingerprint = Fingerprint;