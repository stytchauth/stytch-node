"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rules = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `fraud.rules.set`.

// Response type for `fraud.rules.set`.

class Rules {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Set a rule for a particular `visitor_id`, `browser_id`, `visitor_fingerprint`, `browser_fingerprint`,
   * `hardware_fingerprint`, `network_fingerprint`, `cidr_block`, `asn`, or `country_code`. This is helpful
   * in cases where you want to allow or block a specific user or fingerprint. You should be careful when
   * setting rules for `browser_fingerprint`, `hardware_fingerprint`, or `network_fingerprint` as they can be
   * shared across multiple users, and you could affect more users than intended.
   *
   * You may not set an `ALLOW` rule for a `country_code`.
   *
   * Rules are applied in the order specified above. For example, if an end user has an `ALLOW` rule set for
   * their `visitor_id` but a `BLOCK` rule set for their `hardware_fingerprint`, they will receive an `ALLOW`
   * verdict because the `visitor_id` rule takes precedence.
   *
   * If there are conflicts between multiple `cidr_block` rules (for example, if the `ip_address` of the end
   * user overlaps with multiple CIDR blocks that have rules set), the conflicts are resolved as follows:
   * - The smallest block size takes precedence. For example, if an `ip_address` overlaps with a `cidr_block`
   * rule of `ALLOW` for a block with a prefix of `/32` and a `cidr_block` rule of `BLOCK` with a prefix of
   * `/24`, the rule match verdict will be `ALLOW`.
   * - Among equivalent size blocks, `BLOCK` takes precedence over `CHALLENGE`, which takes precedence over
   * `ALLOW`. For example, if an `ip_address` overlaps with two `cidr_block` rules with blocks of the same
   * size that return `CHALLENGE` and `ALLOW`, the rule match verdict will be `CHALLENGE`.
   * @param data {@link FraudRulesSetRequest}
   * @returns {@link FraudRulesSetResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  set(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/rules/set`,
      baseURLType: "FRAUD",
      headers,
      data
    });
  }
}
exports.Rules = Rules;