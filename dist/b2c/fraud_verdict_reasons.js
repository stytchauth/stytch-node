"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VerdictReasons = void 0;
require("../shared/method_options");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `fraud.verdictReasons.list`.

// Response type for `fraud.verdictReasons.list`.

// Request type for `fraud.verdictReasons.override`.

// Response type for `fraud.verdictReasons.override`.

class VerdictReasons {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Use this endpoint to override the action returned for a specific verdict reason during a fingerprint
   * lookup. For example, Stytch Device Fingerprinting returns a `CHALLENGE` verdict action by default for
   * the verdict reason `VIRTUAL_MACHINE`. You can use this endpoint to override that reason to return an
   * `ALLOW` verdict instead if you expect many legitimate users to be using a browser that runs in a virtual
   * machine.
   * @param data {@link FraudVerdictReasonsOverrideRequest}
   * @returns {@link FraudVerdictReasonsOverrideResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  override(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/verdict_reasons/override`,
      baseURLType: "FRAUD",
      headers,
      data
    });
  }

  /**
   * Get the list of verdict reasons returned by the Stytch Device Fingerprinting product along with their
   * default actions and any overrides you may have defined. This is not an exhaustive list of verdict
   * reasons, but it contains all verdict reasons that you may set an override on.
   *
   * For a full list of possible verdict reasons, see
   * [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
   * @param data {@link FraudVerdictReasonsListRequest}
   * @returns {@link FraudVerdictReasonsListResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  list(data) {
    const headers = {};
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/verdict_reasons/list`,
      baseURLType: "FRAUD",
      headers,
      data
    });
  }
}
exports.VerdictReasons = VerdictReasons;