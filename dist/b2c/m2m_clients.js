"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Clients = void 0;
var _shared = require("../shared");
var _m2m_clients_secrets = require("./m2m_clients_secrets");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `m2m.clients.create`.

// Response type for `m2m.clients.create`.

// Request type for `m2m.clients.delete`.

// Response type for `m2m.clients.delete`.

// Request type for `m2m.clients.get`.

// Response type for `m2m.clients.get`.

// Request type for `m2m.clients.search`.

// Response type for `m2m.clients.search`.

// Request type for `m2m.clients.update`.

// Response type for `m2m.clients.update`.

class Clients {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
    this.secrets = new _m2m_clients_secrets.Secrets(this.fetchConfig);
  }

  /**
   * Gets information about an existing M2M Client.
   * @param data {@link M2MClientsGetRequest}
   * @returns {@link M2MClientsGetResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  get(params) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "GET",
      url: `/v1/m2m/clients/${params.client_id}`,
      params: {}
    });
  }

  /**
   * Search for M2M Clients within your Stytch Project. Submit an empty `query` in the request to return all
   * M2M Clients.
   *
   * The following search filters are supported today:
   * - `client_id`: Pass in a list of client IDs to get many clients in a single request
   * - `client_name`: Search for clients by exact match on client name
   * - `scopes`: Search for clients assigned a specific scope
   * @param data {@link M2MClientsSearchRequest}
   * @returns {@link M2MClientsSearchResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  search(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/m2m/clients/search`,
      data
    });
  }

  /**
   * Updates an existing M2M Client. You can use this endpoint to activate or deactivate a M2M Client by
   * changing its `status`. A deactivated M2M Client will not be allowed to perform future token exchange
   * flows until it is reactivated.
   *
   * **Important:** Deactivating a M2M Client will not invalidate any existing JWTs issued to the client,
   * only prevent it from receiving new ones.
   * To protect more-sensitive routes, pass a lower `max_token_age` value
   * when[authenticating the token](https://stytch.com/docs/b2b/api/authenticate-m2m-token)[authenticating the token](https://stytch.com/docs/api/authenticate-m2m-token).
   * @param data {@link M2MClientsUpdateRequest}
   * @returns {@link M2MClientsUpdateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  update(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "PUT",
      url: `/v1/m2m/clients/${data.client_id}`,
      data: {
        client_name: data.client_name,
        client_description: data.client_description,
        status: data.status,
        scopes: data.scopes,
        trusted_metadata: data.trusted_metadata
      }
    });
  }

  /**
   * Deletes the M2M Client.
   *
   * **Important:** Deleting a M2M Client will not invalidate any existing JWTs issued to the client, only
   * prevent it from receiving new ones.
   * To protect more-sensitive routes, pass a lower `max_token_age` value
   * when[authenticating the token](https://stytch.com/docs/b2b/api/authenticate-m2m-token)[authenticating the token](https://stytch.com/docs/api/authenticate-m2m-token).
   * @param data {@link M2MClientsDeleteRequest}
   * @returns {@link M2MClientsDeleteResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  delete(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "DELETE",
      url: `/v1/m2m/clients/${data.client_id}`,
      data: {}
    });
  }

  /**
   * Creates a new M2M Client. On initial client creation, you may pass in a custom `client_id` or
   * `client_secret` to import an existing M2M client. If you do not pass in a custom `client_id` or
   * `client_secret`, one will be generated automatically. The `client_id` must be unique among all clients
   * in your project.
   *
   * **Important:** This is the only time you will be able to view the generated `client_secret` in the API
   * response. Stytch stores a hash of the `client_secret` and cannot recover the value if lost. Be sure to
   * persist the `client_secret` in a secure location. If the `client_secret` is lost, you will need to
   * trigger a secret rotation flow to receive another one.
   * @param data {@link M2MClientsCreateRequest}
   * @returns {@link M2MClientsCreateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  create(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/m2m/clients`,
      data
    });
  }
}
exports.Clients = Clients;