"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MagicLinks = void 0;
var _magic_links_email = require("./magic_links_email");
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `magicLinks.authenticate`.

// Response type for `magicLinks.authenticate`.

// Request type for `magicLinks.create`.

// Response type for `magicLinks.create`.

class MagicLinks {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
    this.email = new _magic_links_email.Email(this.fetchConfig);
  }

  /**
   * Authenticate a User given a Magic Link. This endpoint verifies that the Magic Link token is valid,
   * hasn't expired or been previously used, and any optional security settings such as IP match or user
   * agent match are satisfied.
   * @param data {@link MagicLinksAuthenticateRequest}
   * @returns {@link MagicLinksAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/magic_links/authenticate`,
      data
    });
  }

  /**
   * Create an embeddable Magic Link token for a User. Access to this endpoint is restricted. To enable it,
   * please send us a note at support@stytch.com.
   *
   * ### Next steps
   * Send the returned `token` value to the end user in a link which directs to your application. When the
   * end user follows your link, collect the token, and call
   * [Authenticate Magic Link](https://stytch.com/docs/api/authenticate-magic-link) to complete
   * authentication.
   * @param data {@link MagicLinksCreateRequest}
   * @returns {@link MagicLinksCreateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  create(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/magic_links`,
      data
    });
  }
}
exports.MagicLinks = MagicLinks;