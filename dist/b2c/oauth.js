"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OAuth = void 0;
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `oauth.attach`.

// Response type for `oauth.attach`.

// Request type for `oauth.authenticate`.

// Response type for `oauth.authenticate`.

class OAuth {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Generate an OAuth Attach Token to pre-associate an OAuth flow with an existing Stytch User. Pass the
   * returned `oauth_attach_token` to the same provider's OAuth Start endpoint to treat this OAuth flow as a
   * login for that user instead of a signup for a new user.
   *
   * Exactly one of `user_id`, `session_token`, or `session_jwt` must be provided to identify the target
   * Stytch User.
   *
   * This is an optional step in the OAuth flow. Stytch can often determine whether to create a new user or
   * log in an existing one based on verified identity provider information. This endpoint is useful for
   * cases where we can't, such as missing or unverified provider information.
   * @param data {@link OAuthAttachRequest}
   * @returns {@link OAuthAttachResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  attach(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/oauth/attach`,
      data
    });
  }

  /**
   * Authenticate a User given a `token`. This endpoint verifies that the user completed the OAuth flow by
   * verifying that the token is valid and hasn't expired. To initiate a Stytch session for the user while
   * authenticating their OAuth token, include `session_duration_minutes`; a session with the identity
   * provider, e.g. Google or Facebook, will always be initiated upon successful authentication.
   * @param data {@link OAuthAuthenticateRequest}
   * @returns {@link OAuthAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/oauth/authenticate`,
      data
    });
  }
}
exports.OAuth = OAuth;