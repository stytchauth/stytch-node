"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OTPs = void 0;
var _otps_email = require("./otps_email");
var _shared = require("../shared");
var _otps_sms = require("./otps_sms");
var _otps_whatsapp = require("./otps_whatsapp");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `otps.authenticate`.

// Response type for `otps.authenticate`.

class OTPs {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
    this.sms = new _otps_sms.Sms(this.fetchConfig);
    this.whatsapp = new _otps_whatsapp.Whatsapp(this.fetchConfig);
    this.email = new _otps_email.Email(this.fetchConfig);
  }

  /**
   * Authenticate a User given a `method_id` (the associated `email_id` or `phone_id`) and a `code`. This
   * endpoint verifies that the code is valid, hasn't expired or been previously used, and any optional
   * security settings such as IP match or user agent match are satisfied. A given `method_id` may only have
   * a single active OTP code at any given time, if a User requests another OTP code before the first one has
   * expired, the first one will be invalidated.
   * @param data {@link OTPsAuthenticateRequest}
   * @returns {@link OTPsAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/otps/authenticate`,
      data
    });
  }
}
exports.OTPs = OTPs;