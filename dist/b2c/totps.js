"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TOTPs = void 0;
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `totps.authenticate`.

// Response type for `totps.authenticate`.

// Request type for `totps.create`.

// Response type for `totps.create`.

// Request type for `totps.recover`.

// Response type for `totps.recover`.

// Request type for `totps.recoveryCodes`.

// Response type for `totps.recoveryCodes`.

class TOTPs {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Create a new TOTP instance for a user. The user can use the authenticator application of their choice to
   * scan the QR code or enter the secret.
   * @param data {@link TOTPsCreateRequest}
   * @returns {@link TOTPsCreateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  create(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/totps`,
      data
    });
  }

  /**
   * Authenticate a TOTP code entered by a user.
   * @param data {@link TOTPsAuthenticateRequest}
   * @returns {@link TOTPsAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/totps/authenticate`,
      data
    });
  }

  /**
   * Retrieve the recovery codes for a TOTP instance tied to a User.
   * @param data {@link TOTPsRecoveryCodesRequest}
   * @returns {@link TOTPsRecoveryCodesResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  recoveryCodes(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/totps/recovery_codes`,
      data
    });
  }

  /**
   * Authenticate a recovery code for a TOTP instance.
   * @param data {@link TOTPsRecoverRequest}
   * @returns {@link TOTPsRecoverResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  recover(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/totps/recover`,
      data
    });
  }
}
exports.TOTPs = TOTPs;