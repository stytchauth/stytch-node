"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebAuthn = void 0;
var _shared = require("../shared");
// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// Request type for `webauthn.authenticate`.

// Response type for `webauthn.authenticate`.

// Request type for `webauthn.authenticateStart`.

// Response type for `webauthn.authenticateStart`.

// Request type for `webauthn.register`.

// Response type for `webauthn.register`.

// Request type for `webauthn.registerStart`.

// Response type for `webauthn.registerStart`.

// Request type for `webauthn.update`.

// Response type for `webauthn.update`.

class WebAuthn {
  constructor(fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Initiate the process of creating a new WebAuthn registration. After calling this endpoint, the browser
   * will need to call
   * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential) with the data
   * from
   * [public_key_credential_creation_options](https://w3c.github.io/webauthn/#dictionary-makecredentialoptions)
   * passed to the [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential)
   * request via the public key argument. We recommend using the `create()` wrapper provided by the
   * webauthn-json library.
   *
   * If you are not using the [webauthn-json](https://github.com/github/webauthn-json) library, the
   * `public_key_credential_creation_options` will need to be converted to a suitable public key by
   * unmarshalling the JSON, base64 decoding the user ID field, and converting user ID and the challenge
   * fields into an array buffer.
   * @param data {@link WebAuthnRegisterStartRequest}
   * @returns {@link WebAuthnRegisterStartResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  registerStart(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/webauthn/register/start`,
      data
    });
  }

  /**
   * Complete the creation of a WebAuthn registration by passing the response from the
   * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential) request to
   * this endpoint as the `public_key_credential` parameter.
   *
   * If the [webauthn-json](https://github.com/github/webauthn-json) library's `create()` method was used,
   * the response can be passed directly to the
   * [register endpoint](https://stytch.com/docs/api/webauthn-register). If not, some fields (the client data
   * and the attestation object) from the
   * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential) response will
   * need to be converted from array buffers to strings and marshalled into JSON.
   * @param data {@link WebAuthnRegisterRequest}
   * @returns {@link WebAuthnRegisterResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  register(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/webauthn/register`,
      data
    });
  }

  /**
   * Initiate the authentication of a WebAuthn registration. After calling this endpoint, the browser will
   * need to call [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) with the
   * data from `public_key_credential_request_options` passed to the
   * [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) request via the
   * public key argument. We recommend using the `get()` wrapper provided by the webauthn-json library.
   *
   * If you are not using the [webauthn-json](https://github.com/github/webauthn-json) library, `the
   * public_key_credential_request_options` will need to be converted to a suitable public key by
   * unmarshalling the JSON and converting some the fields to array buffers.
   * @param data {@link WebAuthnAuthenticateStartRequest}
   * @returns {@link WebAuthnAuthenticateStartResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticateStart(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/webauthn/authenticate/start`,
      data
    });
  }

  /**
   * Complete the authentication of a WebAuthn registration by passing the response from the
   * [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) request to the
   * authenticate endpoint.
   *
   * If the [webauthn-json](https://github.com/github/webauthn-json) library's `get()` method was used, the
   * response can be passed directly to the
   * [authenticate endpoint](https://stytch.com/docs/api/webauthn-authenticate). If not some fields from the
   * [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) response will need to
   * be converted from array buffers to strings and marshalled into JSON.
   * @param data {@link WebAuthnAuthenticateRequest}
   * @returns {@link WebAuthnAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "POST",
      url: `/v1/webauthn/authenticate`,
      data
    });
  }

  /**
   * Updates a WebAuthn registration.
   * @param data {@link WebAuthnUpdateRequest}
   * @returns {@link WebAuthnUpdateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  update(data) {
    return (0, _shared.request)(this.fetchConfig, {
      method: "PUT",
      url: `/v1/webauthn/${data.webauthn_registration_id}`,
      data: {
        name: data.name
      }
    });
  }
}
exports.WebAuthn = WebAuthn;