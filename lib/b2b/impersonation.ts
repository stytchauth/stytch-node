// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import {} from "../shared/method_options";
import { fetchConfig } from "../shared";
import { Member, Organization } from "./organizations";
import { MemberSession } from "./sessions";
import { MfaRequired } from "./mfa";
import { request } from "../shared";

export interface B2BImpersonationAuthenticateRequest {
  token: string;
}

export interface B2BImpersonationAuthenticateResponse {
  request_id: string;
  member_id: string;
  organization_id: string;
  member: Member;
  session_token: string;
  session_jwt: string;
  organization: Organization;
  intermediate_session_token: string;
  member_authenticated: boolean;
  status_code: number;
  member_session?: MemberSession;
  mfa_required?: MfaRequired;
}

export class Impersonation {
  private fetchConfig: fetchConfig;

  constructor(fetchConfig: fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * @param data {@link B2BImpersonationAuthenticateRequest}
   * @returns {@link B2BImpersonationAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(
    data: B2BImpersonationAuthenticateRequest
  ): Promise<B2BImpersonationAuthenticateResponse> {
    const headers: Record<string, string> = {};
    return request<B2BImpersonationAuthenticateResponse>(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/impersonation/authenticate`,
      headers,
      data,
    });
  }
}
