// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import { Discovery } from "./oauth_discovery";
import { fetchConfig } from "../shared";
import { Member, Organization } from "./organizations";
import { MemberSession } from "./sessions";
import { request } from "../shared";

export interface B2BOAuthProviderValues {
  // The `access_token` that you may use to access the User's data in the provider's API.
  access_token: string;
  /**
   * The OAuth scopes included for a given provider. See each provider's section above to see which scopes
   * are included by default and how to add custom scopes.
   */
  scopes: string[];
  // The `refresh_token` that you may use to refresh a User's session within the provider's API.
  refresh_token?: string;
  expires_at?: string;
  /**
   * The `id_token` returned by the OAuth provider. ID Tokens are JWTs that contain structured information
   * about a user. The exact content of each ID Token varies from provider to provider. ID Tokens are
   * returned from OAuth providers that conform to the [OpenID Connect](https://openid.net/foundation/)
   * specification, which is based on OAuth.
   */
  id_token?: string;
}

// Request type for `oauth.authenticate`.
export interface B2BOAuthAuthenticateRequest {
  // The token to authenticate.
  oauth_token: string;
  // A secret token for a given Stytch Session.
  session_token?: string;
  /**
   * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
   * already exist,
   *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
   * `session_jwt` will have a fixed lifetime of
   *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
   *
   *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
   *
   *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
   * extend the session this many minutes.
   *
   *   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
   * 60 minute duration. If you don't want
   *   to use the Stytch session product, you can ignore the session fields in the response.
   */
  session_duration_minutes?: number;
  // The JSON Web Token (JWT) for a given Stytch Session.
  session_jwt?: string;
  /**
   * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
   * initialized by providing a value in
   *   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
   * key in an existing Session, supply a new value. To
   *   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
   * `exp`, `nbf`, `iat`, `jti`) will be ignored.
   *   Total custom claims size cannot exceed four kilobytes.
   */
  session_custom_claims?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any
  // A base64url encoded one time secret used to validate that the request starts and ends on the same device.
  pkce_code_verifier?: string;
  locale?: "en" | "es" | "pt-br" | string;
}

// Response type for `oauth.authenticate`.
export interface B2BOAuthAuthenticateResponse {
  /**
   * Globally unique UUID that is returned with every API call. This value is important to log for debugging
   * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
   */
  request_id: string;
  // Globally unique UUID that identifies a specific Member.
  member_id: string;
  provider_subject: string;
  provider_type: string;
  // A secret token for a given Stytch Session.
  session_token: string;
  // The JSON Web Token (JWT) for a given Stytch Session.
  session_jwt: string;
  // The [Member object](https://stytch.com/docs/b2b/api/member-object).
  member: Member;
  /**
   * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
   * perform operations on an Organization, so be sure to preserve this value.
   */
  organization_id: string;
  // The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
  organization: Organization;
  reset_sessions: boolean;
  /**
   * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
   * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
   */
  status_code: number;
  // The [Session object](https://stytch.com/docs/b2b/api/session-object).
  member_session?: MemberSession;
  /**
   * The `provider_values` object lists relevant identifiers, values, and scopes for a given OAuth provider.
   * For example this object will include a provider's `access_token` that you can use to access the
   * provider's API for a given user.
   *
   *   Note that these values will vary based on the OAuth provider in question, e.g. `id_token` is only
   * returned by Microsoft.
   */
  provider_values?: B2BOAuthProviderValues;
}

export class OAuth {
  private fetchConfig: fetchConfig;
  discovery: Discovery;

  constructor(fetchConfig: fetchConfig) {
    this.fetchConfig = fetchConfig;
    this.discovery = new Discovery(this.fetchConfig);
  }

  /**
   * Authenticate a Member given a `token`. This endpoint verifies that the member completed the OAuth flow
   * by verifying that the token is valid and hasn't expired.  Provide the `session_duration_minutes`
   * parameter to set the lifetime of the session. If the `session_duration_minutes` parameter is not
   * specified, a Stytch session will be created with a 60 minute duration.
   * @param data {@link B2BOAuthAuthenticateRequest}
   * @returns {@link B2BOAuthAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(
    data: B2BOAuthAuthenticateRequest
  ): Promise<B2BOAuthAuthenticateResponse> {
    return request<B2BOAuthAuthenticateResponse>(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/oauth/authenticate`,
      data,
    });
  }
}
