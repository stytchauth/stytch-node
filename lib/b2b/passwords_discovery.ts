// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import {} from "../shared/method_options";
import { DiscoveredOrganization } from "./discovery";
import { Email } from "./passwords_discovery_email";
import { fetchConfig } from "../shared";
import { request } from "../shared";

export interface B2BPasswordsDiscoveryAuthenticateRequest {
  email_address: string;
  password: string;
}

export interface B2BPasswordsDiscoveryAuthenticateResponse {
  request_id: string;
  email_address: string;
  intermediate_session_token: string;
  discovered_organizations: DiscoveredOrganization[];
  status_code: number;
}

export class Discovery {
  private fetchConfig: fetchConfig;
  email: Email;

  constructor(fetchConfig: fetchConfig) {
    this.fetchConfig = fetchConfig;
    this.email = new Email(this.fetchConfig);
  }

  /**
   * @param data {@link B2BPasswordsDiscoveryAuthenticateRequest}
   * @returns {@link B2BPasswordsDiscoveryAuthenticateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  authenticate(
    data: B2BPasswordsDiscoveryAuthenticateRequest
  ): Promise<B2BPasswordsDiscoveryAuthenticateResponse> {
    const headers: Record<string, string> = {};
    return request<B2BPasswordsDiscoveryAuthenticateResponse>(
      this.fetchConfig,
      {
        method: "POST",
        url: `/v1/b2b/passwords/discovery/authenticate`,
        headers,
        data,
      }
    );
  }
}
