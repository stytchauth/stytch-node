// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import {} from "../shared/method_options";
import { fetchConfig } from "../shared";
import { Member, Organization } from "./organizations";
import { MemberSession } from "./sessions";
import { request } from "../shared";

export interface B2BRecoveryCodesGetRequest {
  organization_id: string;
  member_id: string;
}

export interface B2BRecoveryCodesGetResponse {
  request_id: string;
  member_id: string;
  member: Member;
  organization: Organization;
  recovery_codes: string[];
  status_code: number;
}

export interface B2BRecoveryCodesRecoverRequest {
  organization_id: string;
  member_id: string;
  recovery_code: string;
  intermediate_session_token?: string;
  session_token?: string;
  session_jwt?: string;
  session_duration_minutes?: number;
  session_custom_claims?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any
}

export interface B2BRecoveryCodesRecoverResponse {
  request_id: string;
  member_id: string;
  member: Member;
  organization: Organization;
  session_token: string;
  session_jwt: string;
  recovery_codes_remaining: number;
  status_code: number;
  member_session?: MemberSession;
}

export interface B2BRecoveryCodesRotateRequest {
  organization_id: string;
  member_id: string;
}

export interface B2BRecoveryCodesRotateResponse {
  request_id: string;
  member_id: string;
  member: Member;
  organization: Organization;
  recovery_codes: string[];
  status_code: number;
}

export class RecoveryCodes {
  private fetchConfig: fetchConfig;

  constructor(fetchConfig: fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * @param data {@link B2BRecoveryCodesRecoverRequest}
   * @returns {@link B2BRecoveryCodesRecoverResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  recover(
    data: B2BRecoveryCodesRecoverRequest
  ): Promise<B2BRecoveryCodesRecoverResponse> {
    const headers: Record<string, string> = {};
    return request<B2BRecoveryCodesRecoverResponse>(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/recovery_codes/recover`,
      headers,
      data,
    });
  }

  /**
   * @param params {@link B2BRecoveryCodesGetRequest}
   * @returns {@link B2BRecoveryCodesGetResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  get(
    params: B2BRecoveryCodesGetRequest
  ): Promise<B2BRecoveryCodesGetResponse> {
    const headers: Record<string, string> = {};
    return request<B2BRecoveryCodesGetResponse>(this.fetchConfig, {
      method: "GET",
      url: `/v1/b2b/recovery_codes`,
      headers,
      params: { ...params },
    });
  }

  /**
   * @param data {@link B2BRecoveryCodesRotateRequest}
   * @returns {@link B2BRecoveryCodesRotateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  rotate(
    data: B2BRecoveryCodesRotateRequest
  ): Promise<B2BRecoveryCodesRotateResponse> {
    const headers: Record<string, string> = {};
    return request<B2BRecoveryCodesRotateResponse>(this.fetchConfig, {
      method: "POST",
      url: `/v1/b2b/recovery_codes/rotate`,
      headers,
      data,
    });
  }
}
