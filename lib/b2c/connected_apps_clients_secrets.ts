// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import {} from "../shared/method_options";
import {
  ConnectedApp,
  ConnectedAppWithNextClientSecret,
} from "./connected_apps";
import { fetchConfig } from "../shared";
import { request } from "../shared";

export interface ConnectedAppsClientsSecretsRotateCancelRequest {
  client_id: string;
}

export interface ConnectedAppsClientsSecretsRotateCancelResponse {
  request_id: string;
  connected_app: ConnectedApp;
  status_code: number;
}

export interface ConnectedAppsClientsSecretsRotateRequest {
  client_id: string;
}

export interface ConnectedAppsClientsSecretsRotateResponse {
  request_id: string;
  connected_app: ConnectedApp;
  status_code: number;
}

export interface ConnectedAppsClientsSecretsRotateStartRequest {
  client_id: string;
}

export interface ConnectedAppsClientsSecretsRotateStartResponse {
  request_id: string;
  connected_app: ConnectedAppWithNextClientSecret;
  status_code: number;
}

export class Secrets {
  private fetchConfig: fetchConfig;

  constructor(fetchConfig: fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * @param data {@link ConnectedAppsClientsSecretsRotateStartRequest}
   * @returns {@link ConnectedAppsClientsSecretsRotateStartResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  rotateStart(
    data: ConnectedAppsClientsSecretsRotateStartRequest
  ): Promise<ConnectedAppsClientsSecretsRotateStartResponse> {
    const headers: Record<string, string> = {};
    return request<ConnectedAppsClientsSecretsRotateStartResponse>(
      this.fetchConfig,
      {
        method: "POST",
        url: `/v1/connected_apps/clients/${data.client_id}/secrets/rotate/start`,
        headers,
        data: {},
      }
    );
  }

  /**
   * @param data {@link ConnectedAppsClientsSecretsRotateCancelRequest}
   * @returns {@link ConnectedAppsClientsSecretsRotateCancelResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  rotateCancel(
    data: ConnectedAppsClientsSecretsRotateCancelRequest
  ): Promise<ConnectedAppsClientsSecretsRotateCancelResponse> {
    const headers: Record<string, string> = {};
    return request<ConnectedAppsClientsSecretsRotateCancelResponse>(
      this.fetchConfig,
      {
        method: "POST",
        url: `/v1/connected_apps/clients/${data.client_id}/secrets/rotate/cancel`,
        headers,
        data: {},
      }
    );
  }

  /**
   * @param data {@link ConnectedAppsClientsSecretsRotateRequest}
   * @returns {@link ConnectedAppsClientsSecretsRotateResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  rotate(
    data: ConnectedAppsClientsSecretsRotateRequest
  ): Promise<ConnectedAppsClientsSecretsRotateResponse> {
    const headers: Record<string, string> = {};
    return request<ConnectedAppsClientsSecretsRotateResponse>(
      this.fetchConfig,
      {
        method: "POST",
        url: `/v1/connected_apps/clients/${data.client_id}/secrets/rotate`,
        headers,
        data: {},
      }
    );
  }
}
