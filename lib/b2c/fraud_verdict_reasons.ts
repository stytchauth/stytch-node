// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import {} from "../shared/method_options";
import { fetchConfig } from "../shared";
import { request } from "../shared";
import { VerdictReasonAction } from "./fraud";

// Request type for `fraud.verdictReasons.list`.
export interface FraudVerdictReasonsListRequest {
  // Whether to return only verdict reasons that have overrides set. Defaults to false.
  overrides_only?: boolean;
}

// Response type for `fraud.verdictReasons.list`.
export interface FraudVerdictReasonsListResponse {
  /**
   * Globally unique UUID that is returned with every API call. This value is important to log for debugging
   * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
   */
  request_id: string;
  // Information about verdict reasons and any overrides that were set on them.
  verdict_reason_actions: VerdictReasonAction[];
  /**
   * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
   * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
   */
  status_code: number;
}

// Request type for `fraud.verdictReasons.override`.
export interface FraudVerdictReasonsOverrideRequest {
  /**
   * The verdict reason that you wish to override. For a list of possible reasons to override, see
   * [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons). You may not override the `RULE_MATCH` reason.
   */
  verdict_reason: string;
  /**
   * The action that you want to be returned for the specified verdict reason. The override action must be
   * one of `ALLOW`, `BLOCK`, or `CHALLENGE`.
   */
  override_action: "ALLOW" | "CHALLENGE" | "BLOCK" | "NONE" | string;
  // An optional description for the verdict reason override.
  override_description?: string;
}

// Response type for `fraud.verdictReasons.override`.
export interface FraudVerdictReasonsOverrideResponse {
  /**
   * Globally unique UUID that is returned with every API call. This value is important to log for debugging
   * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
   */
  request_id: string;
  // Information about the verdict reason override that was just set.
  verdict_reason_action: VerdictReasonAction;
  /**
   * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
   * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
   */
  status_code: number;
}

export class VerdictReasons {
  private fetchConfig: fetchConfig;

  constructor(fetchConfig: fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * Use this endpoint to override the action returned for a specific verdict reason during a fingerprint
   * lookup. For example, Stytch Device Fingerprinting returns a `CHALLENGE` verdict action by default for
   * the verdict reason `VIRTUAL_MACHINE`. You can use this endpoint to override that reason to return an
   * `ALLOW` verdict instead if you expect many legitimate users to be using a browser that runs in a virtual
   * machine.
   * @param data {@link FraudVerdictReasonsOverrideRequest}
   * @returns {@link FraudVerdictReasonsOverrideResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  override(
    data: FraudVerdictReasonsOverrideRequest
  ): Promise<FraudVerdictReasonsOverrideResponse> {
    const headers: Record<string, string> = {};
    return request<FraudVerdictReasonsOverrideResponse>(this.fetchConfig, {
      method: "POST",
      url: `/v1/verdict_reasons/override`,
      baseURLType: "FRAUD",
      headers,
      data,
    });
  }

  /**
   * Get the list of verdict reasons returned by the Stytch Device Fingerprinting product along with their
   * default actions and any overrides you may have defined. This is not an exhaustive list of verdict
   * reasons, but it contains all verdict reasons that you may set an override on.
   *
   * For a full list of possible verdict reasons, see
   * [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
   * @param data {@link FraudVerdictReasonsListRequest}
   * @returns {@link FraudVerdictReasonsListResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  list(
    data: FraudVerdictReasonsListRequest
  ): Promise<FraudVerdictReasonsListResponse> {
    const headers: Record<string, string> = {};
    return request<FraudVerdictReasonsListResponse>(this.fetchConfig, {
      method: "POST",
      url: `/v1/verdict_reasons/list`,
      baseURLType: "FRAUD",
      headers,
      data,
    });
  }
}
