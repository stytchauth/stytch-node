// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import { Clients } from "./m2m_clients";
import { fetchConfig } from "../shared";

import * as jose from "jose";
import { JwtConfig } from "../shared/sessions";

export interface M2MClient {
  // The ID of the client.
  client_id: string;
  // A human-readable name for the client.
  client_name: string;
  // A human-readable description for the client.
  client_description: string;
  // The status of the client - either `active` or `inactive`.
  status: string;
  // An array of scopes assigned to the client.
  scopes: string[];
  // The last four characters of the client secret.
  client_secret_last_four: string;
  // An arbitrary JSON object for storing application-specific data.
  trusted_metadata?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any
  // The last four characters of the `next_client_secret`. Null if no `next_client_secret` exists.
  next_client_secret_last_four?: string;
}

export interface M2MClientWithClientSecret {
  // The ID of the client.
  client_id: string;
  /**
   * The secret of the client. **Important:** this is the only time you will be able to view the
   * `client_secret`. Be sure to persist the `client_secret` in a secure location. If the `client_secret` is
   * lost, you will need to trigger a secret rotation flow to receive another one.
   */
  client_secret: string;
  // A human-readable name for the client.
  client_name: string;
  // A human-readable description for the client.
  client_description: string;
  // The status of the client - either `active` or `inactive`.
  status: string;
  // An array of scopes assigned to the client.
  scopes: string[];
  // The last four characters of the client secret.
  client_secret_last_four: string;
  // An arbitrary JSON object for storing application-specific data.
  trusted_metadata?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any
  // The last four characters of the `next_client_secret`. Null if no `next_client_secret` exists.
  next_client_secret_last_four?: string;
}

export interface M2MClientWithNextClientSecret {
  // The ID of the client.
  client_id: string;
  /**
   * The newly created secret that's next in rotation for the client. **Important:** this is the only time
   * you will be able to view the `next_client_secret`. Be sure to persist the `next_client_secret` in a
   * secure location. If the `next_client_secret` is lost, you will need to trigger a secret rotation flow to
   * receive another one.
   */
  next_client_secret: string;
  // A human-readable name for the client.
  client_name: string;
  // A human-readable description for the client.
  client_description: string;
  // The status of the client - either `active` or `inactive`.
  status: string;
  // An array of scopes assigned to the client.
  scopes: string[];
  // The last four characters of the client secret.
  client_secret_last_four: string;
  // An arbitrary JSON object for storing application-specific data.
  trusted_metadata?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any
  // The last four characters of the `next_client_secret`. Null if no `next_client_secret` exists.
  next_client_secret_last_four?: string;
}

export interface M2MResultsMetadata {
  // The total number of results returned by your search query.
  total: number;
  /**
   * The `next_cursor` string is returned when your search result contains more than one page of results.
   * This value is passed into your next search call in the `cursor` field.
   */
  next_cursor?: string;
}

export interface M2MSearchQuery {
  /**
   * The action to perform on the operands. The accepted value are:
   *
   *   `AND` – all the operand values provided must match.
   *
   *   `OR` – the operator will return any matches to at least one of the operand values you supply.
   */
  operator: "OR" | "AND" | string;
  /**
   * An array of operand objects that contains all of the filters and values to apply to your search search
   * query.
   */
  operands: M2MSearchQueryOperand[];
}

// MANUAL(M2MSearchQueryOperand)(TYPES)
export type M2MSearchQueryOperand =
  | {
      filter_name: "client_id";
      filter_value: string[];
    }
  | {
      filter_name: "client_name";
      filter_value: string[];
    }
  | {
      filter_name: "scopes";
      filter_value: string[];
    };
// ENDMANUAL(M2MSearchQueryOperand)

export class M2M {
  private fetchConfig: fetchConfig;
  private jwksClient: jose.JWTVerifyGetKey;
  private jwtOptions: jose.JWTVerifyOptions;
  clients: Clients;

  constructor(fetchConfig: fetchConfig, jwtConfig: JwtConfig) {
    this.fetchConfig = fetchConfig;
    this.clients = new Clients(this.fetchConfig);
    this.jwksClient = jwtConfig.jwks;
    this.jwtOptions = {
      audience: jwtConfig.projectID,
      issuer: `stytch.com/${jwtConfig.projectID}`,
      typ: "JWT",
    };
  }

  // MANUAL(authenticateToken)(SERVICE_METHOD)
  // ADDIMPORT: import * as jose from "jose";
  // ADDIMPORT: import { JwtConfig } from "../shared/sessions";
  authenticateToken() {
    // do something silly with the jwks/jwt to appease the linter
    const arr = [this.jwksClient, this.jwtOptions];
    arr.pop();
  }
  // ENDMANUAL(authenticateToken)
}
