// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import {} from "../shared/method_options";
import { fetchConfig } from "../shared";
import { request } from "../shared";

export interface RBACPolicy {
  roles: RBACPolicyRole[];
  resources: RBACPolicyResource[];
  scopes: RBACPolicyScope[];
}

export interface RBACPolicyResource {
  resource_id: string;
  description: string;
  actions: string[];
}

export interface RBACPolicyRole {
  role_id: string;
  description: string;
  permissions: RBACPolicyRolePermission[];
}

export interface RBACPolicyRolePermission {
  resource_id: string;
  actions: string[];
}

export interface RBACPolicyScope {
  scope: string;
  description: string;
  permissions: RBACPolicyScopePermission[];
}

export interface RBACPolicyScopePermission {
  resource_id: string;
  actions: string[];
}

export interface RBACPolicyResponse {
  request_id: string;
  status_code: number;
  policy?: RBACPolicy;
}

export class RBAC {
  private fetchConfig: fetchConfig;

  constructor(fetchConfig: fetchConfig) {
    this.fetchConfig = fetchConfig;
  }

  /**
   * @param params {@link RBACPolicyRequest}
   * @returns {@link RBACPolicyResponse}
   * @async
   * @throws A {@link StytchError} on a non-2xx response from the Stytch API
   * @throws A {@link RequestError} when the Stytch API cannot be reached
   */
  policy(): Promise<RBACPolicyResponse> {
    const headers: Record<string, string> = {};
    return request<RBACPolicyResponse>(this.fetchConfig, {
      method: "GET",
      url: `/v1/rbac/policy`,
      headers,
    });
  }
}
